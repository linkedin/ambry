// Copyright (C) 2014-2016 LinkedIn Corp. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use
// this file except in compliance with the License. You may obtain a copy of the
// License at  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied.

buildscript {
    repositories {
        mavenCentral()
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

apply from: file('gradle/license.gradle')
apply from: file('gradle/environment.gradle')
apply from: file("gradle/dependency-versions.gradle")

allprojects {
    group = "com.github.ambry"

    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'project-report'

    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java'

    sourceSets {
        test {
            java.srcDir file('src/integration-test/java')
            resources.srcDir file('src/integration-test/resources')
        }
        unitTest {
            java.srcDir file('src/test/java')
            resources.srcDir file('src/test/resources')
        }
    }
    
    dependencies {
        compile "log4j:log4j:$log4jVersion"
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
        testCompile "junit:junit:$junitVersion"
        unitTestCompile sourceSets.main.output
        unitTestCompile sourceSets.test.output
        unitTestCompile configurations.testCompile
        unitTestRuntime configurations.testRuntime
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
    }

    task unitTest(type: Test) {
        testLogging {
            exceptionFormat = 'full'
        }
        testClassesDir = sourceSets.unitTest.output.classesDir
        classpath += sourceSets.unitTest.runtimeClasspath
    }
    
    // only run unit tests when doing a standard build,
    // but run integration tests too when running the test target
    check.dependsOn -= test
    check.dependsOn += unitTest
}

project(':ambry-utils') {
    dependencies {
        compile "commons-codec:commons-codec:$commonsVersion"
        compile "org.json:json:$jsonVersion"
        compile "net.sf.jopt-simple:jopt-simple:$joptSimpleVersion"
    }
}

project(':ambry-api') {
    dependencies {
        compile project(':ambry-utils')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        testCompile project(':ambry-utils').sourceSets.test.output
    }
}

project(':ambry-clustermap') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-metrics'),
                project(':ambry-utils')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        compile "org.json:json:$jsonVersion"
    }
}

project(':ambry-commons') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-clustermap'),
                project(':ambry-messageformat'),
                project(':ambry-utils')
        testCompile project(':ambry-clustermap').sourceSets.test.output
    }
}

project(':ambry-network') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-utils')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        testCompile "org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion"
        testCompile project(':ambry-utils').sourceSets.test.output
    }
}

project(':ambry-server') {
    dependencies {
        compile project(':ambry-clustermap'),
                project(':ambry-coordinator'),
                project(':ambry-messageformat'),
                project(':ambry-metrics'),
                project(':ambry-network'),
                project(':ambry-protocol'),
                project(':ambry-commons'),
                project(':ambry-store'),
                project(':ambry-utils'),
                project(':ambry-replication')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        testCompile project(':ambry-utils').sourceSets.test.output
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-network').sourceSets.test.output
        testCompile "org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion"
    }
}

project(':ambry-store') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-clustermap'),
                project(':ambry-metrics'),
                project(':ambry-utils')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
    }
}

project(':ambry-messageformat') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-utils')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        testCompile project(':ambry-utils').sourceSets.test.output
    }
}

project(':ambry-replication') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-utils'),
                project(':ambry-store'),
                project(':ambry-commons'),
                project(':ambry-protocol'),
                project(':ambry-network')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
    }
}

project(':ambry-coordinator') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-clustermap'),
                project(':ambry-messageformat'),
                project(':ambry-commons'),
                project(':ambry-utils'),
                project(':ambry-protocol'),
                project(':ambry-network')
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-network').sourceSets.test.output
    }
}

project(':ambry-tools') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-store'),
                project(':ambry-coordinator'),
                project(':ambry-rest'),
                project(':ambry-admin'),
                project(':ambry-frontend')
        compile "net.sf.jopt-simple:jopt-simple:$joptSimpleVersion"
    }
}

project(':ambry-metrics') {
    dependencies {
        compile project(':ambry-api')
    }
}

project(':ambry-protocol') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-clustermap'),
                project(':ambry-messageformat'),
                project(':ambry-utils'),
                project(':ambry-commons')
        testCompile project(':ambry-clustermap').sourceSets.test.output
    }
}

project(':ambry-rest') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-utils'),
                project(':ambry-commons')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        compile "net.sf.jopt-simple:jopt-simple:$joptSimpleVersion"
        compile "io.netty:netty-all:4.0.25.Final"
        compile "javax.servlet:javax.servlet-api:$javaxVersion"
        testCompile project(':ambry-api').sourceSets.test.output
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
    }
}

project(':ambry-admin') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-utils'),
                project(':ambry-commons'),
                project(':ambry-rest'),
                project(':ambry-router')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        testCompile project(':ambry-api').sourceSets.test.output
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-rest').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
    }
}

project(':ambry-router') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-utils'),
                project(':ambry-commons'),
                project(':ambry-coordinator')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        testCompile project(':ambry-api').sourceSets.test.output
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
        testCompile project(':ambry-network').sourceSets.test.output
    }
}

project(':ambry-frontend') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-utils'),
                project(':ambry-commons'),
                project(':ambry-rest'),
                project(':ambry-router')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        testCompile project(':ambry-api').sourceSets.test.output
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-rest').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
    }
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path)}

task allJar(type: Jar, dependsOn: subprojects.assemble) {
    manifest {
        attributes 'Implementation-Title': 'Ambry',
                   'Main-Class': 'com.github.ambry.server.AmbryMain'
    }
    destinationDir = file('target')
    baseName = 'ambry'
    subprojects.each { subproject ->
        from  {
            (subproject.configurations.archives.allArtifacts.files + subproject.configurations.runtime).collect {
                zipTree(it)
            }
        }
    }
}
