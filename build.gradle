// Copyright (C) 2014-2016 LinkedIn Corp. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use
// this file except in compliance with the License. You may obtain a copy of the
// License at  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied.

buildscript {
    repositories {
        mavenCentral()
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

plugins {
    id 'org.shipkit.java' version '2.2.5' apply false
}
if (!project.hasProperty('disableShipkit')) {
    apply plugin: 'org.shipkit.java'
}

apply from: file('gradle/license.gradle')
apply from: file('gradle/environment.gradle')
apply from: file("gradle/dependency-versions.gradle")

allprojects {
    group = "com.github.ambry"

    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'project-report'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    sourceSets {
        // separate source set for integration tests
        intTest {
            java.srcDir file('src/integration-test/java')
            resources.srcDir file('src/integration-test/resources')
            compileClasspath += sourceSets.main.output + sourceSets.test.output
            runtimeClasspath += sourceSets.main.output + sourceSets.test.output
        }
    }

    configurations {
        // integration tests should be able to get the same dependencies as the corresponding unit tests
        intTestCompile.extendsFrom testCompile
        intTestRuntime.extendsFrom testRuntime
    }

    dependencies {
        compile "log4j:log4j:$log4jVersion"
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
        testCompile "junit:junit:$junitVersion"
        testCompile "org.mockito:mockito-core:2.+"
        testRuntime project(':log4j-test-config')
    }

    idea {
        // since integration tests are in a separate source set, we have to tell intellij about them
        module {
            testSourceDirs += sourceSets.intTest.java.srcDirs
            testResourceDirs += sourceSets.intTest.resources.srcDirs
            scopes.TEST.plus += [configurations.intTestCompile]
        }
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
        maxHeapSize = "3g"
        systemProperty 'io.netty.leakDetection.level', 'paranoid'
    }

    task intTest(type: Test) {
        description = 'Runs integration tests.'
        group = 'verification'
        testClassesDirs = sourceSets.intTest.output.classesDirs
        classpath = sourceSets.intTest.runtimeClasspath
        testLogging {
            exceptionFormat = 'full'
        }
        maxHeapSize = "3g"
        systemProperty 'io.netty.leakDetection.level', 'paranoid'
    }

    task allTest {
        description = 'Runs unit and integration tests'
        group = 'verification'
    }
    allTest.dependsOn test
    allTest.dependsOn intTest

    task testJar(type: Jar) {
        from sourceSets.test.output
        classifier = 'test'
    }

    artifacts {
        archives testJar
    }

    javadoc {
        // TODO audit and fix our javadocs so that we don't need this setting
        // This is mainly for cases where param/throws tags don't have descriptions
        // Previously, javadocs weren't being compiled, but now shipkit automatically enables this build step
        failOnError = false
    }
}

project(':ambry-utils') {
    dependencies {
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        compile "commons-codec:commons-codec:$commonsVersion"
        compile "org.json:json:$jsonVersion"
        compile "net.sf.jopt-simple:jopt-simple:$joptSimpleVersion"
        compile "io.netty:netty-buffer:$nettyVersion"
        testCompile "org.apache.helix:helix-core:$helixVersion"
    }
}

project(':ambry-api') {
    dependencies {
        compile project(':ambry-utils')
        compile "org.apache.helix:helix-core:$helixVersion"
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        compile "org.codehaus.jackson:jackson-core-asl:$jacksonVersion"
        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
        compile "io.netty:netty-buffer:$nettyVersion"
        testCompile project(':ambry-clustermap')
        testCompile project(':ambry-utils').sourceSets.test.output
    }
}

project(':ambry-account') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-utils'),
                project(':ambry-commons')
        compile "org.apache.helix:helix-core:$helixVersion"
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        compile "org.json:json:$jsonVersion"
        testCompile project(':ambry-utils').sourceSets.test.output
        testCompile project(':ambry-commons').sourceSets.test.output
        testCompile project(':ambry-clustermap').sourceSets.test.output
    }
}

project(':ambry-clustermap') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-utils')
        compile "org.apache.helix:helix-core:$helixVersion"
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        compile "org.json:json:$jsonVersion"
        testCompile project(':ambry-commons')
        testCompile project(':ambry-utils').sourceSets.test.output
    }
}

project(':ambry-commons') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-clustermap'),
                project(':ambry-messageformat'),
                project(':ambry-utils')
        compile "org.conscrypt:conscrypt-openjdk-uber:$conscryptVersion"
        testCompile project(':ambry-api').sourceSets.test.output
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
        testCompile "org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion"
    }
}

project(':ambry-network') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-utils'),
                project(':ambry-commons'),
                project(':ambry-clustermap')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        testCompile project(':ambry-utils').sourceSets.test.output
        testCompile project(':ambry-commons').sourceSets.test.output
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile "org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion"
    }
}

project(':ambry-server') {
    dependencies {
        compile project(':ambry-clustermap'),
                project(':ambry-messageformat'),
                project(':ambry-network'),
                project(':ambry-protocol'),
                project(':ambry-commons'),
                project(':ambry-store'),
                project(':ambry-utils'),
                project(':ambry-replication')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        testCompile project(':ambry-router')
        testCompile project(':ambry-cloud')
        testCompile project(':ambry-cloud').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-network').sourceSets.test.output
        testCompile project(':ambry-api').sourceSets.test.output
        testCompile project(':ambry-commons').sourceSets.test.output
        testCompile project(':ambry-replication').sourceSets.test.output
        testCompile project(':ambry-messageformat').sourceSets.test.output
        testCompile "org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion"
    }
}

project(':ambry-store') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-utils')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        compile "net.smacke:jaydio:$jaydioVersion"
        testCompile project(':ambry-clustermap')
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
        testCompile project(':ambry-api').sourceSets.test.output
    }
}

project(':ambry-messageformat') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-utils')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        testCompile project(':ambry-api').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
    }
}

project(':ambry-replication') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-utils'),
                project(':ambry-commons'),
                project(':ambry-protocol'),
                project(':ambry-network')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-api').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
        testCompile project(':ambry-commons').sourceSets.test.output
        testCompile project(':ambry-messageformat').sourceSets.test.output
        testCompile project(':ambry-store').sourceSets.main.output
    }
}

project(':ambry-tools') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-account'),
                project(':ambry-store'),
                project(':ambry-server'),
                project(':ambry-rest'),
                project(':ambry-frontend'),
                project(':ambry-cloud')
        compile "net.sf.jopt-simple:jopt-simple:$joptSimpleVersion"
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-account').sourceSets.test.output
        testCompile project(':ambry-commons').sourceSets.test.output
        testCompile project(':ambry-store').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
        testCompile project(':ambry-api').sourceSets.test.output
        testCompile project(':ambry-messageformat').sourceSets.test.output
    }
}

project(':ambry-protocol') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-clustermap'),
                project(':ambry-messageformat'),
                project(':ambry-utils'),
                project(':ambry-commons')
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
        testCompile project(':ambry-messageformat').sourceSets.test.output
        testCompile project(':ambry-commons').sourceSets.test.output
    }
}

project(':ambry-rest') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-account'),
                project(':ambry-utils'),
                project(':ambry-commons')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        compile "net.sf.jopt-simple:jopt-simple:$joptSimpleVersion"
        compile "io.netty:netty-all:$nettyVersion"
        compile "io.netty:netty-tcnative-boringssl-static:$nettyTcnativeVersion"
        compile "javax.servlet:javax.servlet-api:$javaxVersion"
        testCompile project(':ambry-api').sourceSets.test.output
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
        testCompile project(':ambry-commons').sourceSets.test.output
        testCompile project(':ambry-router').sourceSets.main.output
        testCompile project(':ambry-router').sourceSets.test.output
        testCompile project(':ambry-account').sourceSets.main.output
        testCompile project(':ambry-account').sourceSets.test.output
        testCompile "org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion"
    }
}

project(':ambry-router') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-utils'),
                project(':ambry-commons'),
                project(':ambry-clustermap'),
                project(':ambry-messageformat'),
                project(':ambry-protocol'),
                project(':ambry-network'),
                project(':ambry-cloud')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        compile "org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion"
        compile "io.netty:netty-buffer:$nettyVersion"
        testCompile project(':ambry-api').sourceSets.test.output
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
        testCompile project(':ambry-network').sourceSets.test.output
        testCompile project(':ambry-commons').sourceSets.test.output
        testCompile project(':ambry-account').sourceSets.main.output
        testCompile project(':ambry-account').sourceSets.test.output
        testCompile project(':ambry-cloud').sourceSets.test.output
    }
}

project(':ambry-frontend') {
    dependencies {
        compile project(':ambry-api'),
                project(':ambry-account'),
                project(':ambry-utils'),
                project(':ambry-commons'),
                project(':ambry-rest'),
                project(':ambry-router')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        testCompile project(':ambry-api').sourceSets.test.output
        testCompile project(':ambry-account').sourceSets.test.output
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-rest').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
        testCompile project(':ambry-commons').sourceSets.test.output
        testCompile project(':ambry-router').sourceSets.test.output
        testCompile "org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion"
    }
}

project(':ambry-cloud') {
    dependencies {
        compile project(':ambry-api'),
            project(':ambry-utils'),
            project(':ambry-commons'),
            project(':ambry-replication')
        compile "com.codahale.metrics:metrics-core:$metricsVersion"
        compile "com.microsoft.azure:azure-storage:$azureStorageVersion"
        compile "com.microsoft.azure:azure-documentdb:$azureDocumentDbVersion"
        testCompile project(':ambry-router')
        testCompile project(':ambry-api').sourceSets.test.output
        testCompile project(':ambry-utils').sourceSets.test.output
        testCompile project(':ambry-commons').sourceSets.test.output
        testCompile project(':ambry-clustermap').sourceSets.test.output
        testCompile project(':ambry-store').sourceSets.main.output
        testCompile project(':ambry-store').sourceSets.test.output
        testCompile project(':ambry-replication').sourceSets.test.output
    }
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path)}

task allJar(type: Jar, dependsOn: subprojects.assemble) {
    manifest {
        attributes 'Implementation-Title': 'Ambry',
                   'Main-Class': 'com.github.ambry.server.AmbryMain'
    }
    zip64 true
    destinationDir = file('target')
    baseName = 'ambry'
    subprojects.each { subproject ->
        from  {
            (subproject.configurations.archives.allArtifacts.files + subproject.configurations.runtime).collect {
                zipTree(it)
            }
        }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task allJarVcr(type: Jar, dependsOn: subprojects.assemble) {
    manifest {
        attributes 'Implementation-Title': 'Vcr',
                   'Main-Class': 'com.github.ambry.cloud.VcrMain'
    }
    zip64 true
    destinationDir = file('target')
    baseName = 'ambry-vcr'
    subprojects.each { subproject ->
        from  {
            (subproject.configurations.archives.allArtifacts.files + subproject.configurations.runtime).collect {
                zipTree(it)
            }
        }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled true
    }
}
codeCoverageReport.dependsOn subprojects*.allTest

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}
